# Подключаем зуммеры к Ардуино
 
###### soderzhanie
## Содержание

### [1. Как подключить зуммер к Arduino](#kak-buzzer-k-arduino)
### [2. Как отличить активный зуммер от пассивного](#kak-otlichit-buzzery)
### [3. Как подключить активный зуммер к Arduino](#kak-aktivnyi)
### [4. Как подключить пассивный зуммер к Arduino](#kak-passivnyi)
### [5. Модуль активного зуммера KY-012](#modul-aktivnogo-zummera-ky-012)
### [6. Модуль пассивного зуммера KY-006](#modul-passivnogo-zummera-ky-006)

###### kak-buzzer-k-arduino
### 1. Как подключить зуммер к Arduino.

[В этой статье](https://rxtx.su/mikrokontrollery/arduino/moduli-i-datchiki-k-arduino/kak-podklyuchit-zummer-k-arduino/ "Как подключить зуммер к Arduino") рассмотрим два разных типа пьезоэлектрических зуммеров (активные и пассивные) и как их подключить к Arduino. Пьезоэлектрические зуммеры издают достаточно громкий звук. При подключении к Arduino они могут использоваться в качестве сигнала тревоги или уведомления при нажатии на кнопку или когда датчик достигает определенного значения. Их также можно запрограммировать на воспроизведение музыкальных нот.

![](proteus-nano-and-sounder.png)
Подключение зуммера к 9 цифровому пину Arduino Nano

**Типы пьезоэлектрических излучателей**

Существует два типа пьезоэлектрических зуммеров, которые обычно используются в электронных проектах: активные зуммеры и пассивные зуммеры. Активные зуммеры называются активными, потому что для воспроизведения звука им требуется только постоянное напряжение. Пассивным зуммерам для воспроизведения звука требуется электрический сигнал (например, импульсный).

Активные зуммеры и пассивные зуммеры внешне очень похожи:

![Активный и пассивный бузеры](active-and-passive-buzzer.png)

###### [к содержанию](#soderzhanie)

###### kak-otlichit-buzzery
### 2. Как отличить активный зуммер от пассивного.
Самый простой способ отличить активный зуммер от пассивного — это подключить его к источнику постоянного напряжения, например к 9-вольтовой батарее или 5 вольтам от платы Arduino. Зуммеры имеют полярность, поэтому перед подключением проверьте, какой вывод (+) положительный, а какой (-) отрицательный.

Когда вы подключите источник постоянного напряжения к пассивному зуммеру, он издаст только резкий щелчок. А вот когда вы подключите активный зуммер, то он начнет воспроизводить громкий жужжащий звук. 

Например - миниатюрный активный зуммер TMB12A05:

    Тип: электромагнитный излучатель;
    Хар. особенности: со встроенным генератором;
    Резонансная частота: 3100±500Гц;
    Рабочий ток: 30мА;
    Номинальное напряжение: 5В;
    Рабочее напряжение: 4...8В;
    Уровень звука: 85дБ/10см;
    Рабочая температура: -20...70°C;
    Размер: 12 x 9мм

###### [к содержанию](#soderzhanie)

###### kak-aktivnyi
### 3. Как подключить активный зуммер к Arduino.

Давайте создадим пример проекта, который будет управлять активным зуммером нажатием кнопки.

Вот детали, которые вам понадобятся:

    Плата Arduino
    Макетная плата
    Перемычки
    Кнопка
    Активный зуммер

Один из способов подключить активный зуммер и кнопку к плате Arduino Nano показан на картинке ниже.

![](arduino_nano_button_zummer.png)

Один из выводов кнопки подключается к контакту D2 платы ардуино, другой контакт — к GND. Плюс + зуммера подключается к контакту D9, минус — зуммера к GND платы.

**Программа для Ардуино и активного зуммера**

Как только ваша схема будет собрана, загрузите этот код в Arduino:

    int buzPin = 9;
    int btnPin = 2;
    
    void setup() 
    {
        pinMode(buzPin, OUTPUT);
        pinMode(btnPin, INPUT_PULLUP);
    }
    
    void loop() 
    {
        int btnState = digitalRead(btnPin);
        if (btnState == LOW)
        {
           digitalWrite(buzPin, HIGH);
        }
        if (btnState == HIGH) 
        {
           digitalWrite(buzPin, LOW);
        }
    }

Активные зуммеры управляются таким же образом, как и светодиоды. Чтобы включить зуммер, контакт к которому он подключен переводится в высокое состояние HIGH. Чтобы его выключить, состояние контакта переводится в низкое состояние LOW.

В верхней части программы мы объявляем две переменные. Первая переменная называется buzPin и устанавливается равной 9 контакту Arduino. Другая переменная называется btnPin и устанавливается равной контакту 2.

В функции setup() buzPin устанавливается как выход OUTPUT с помощью функции pinMode().  btnPin устанавливается как вход с внутренним подтягивающим резистором с помощью INPUT_PULLUP в качестве второго аргумента в функции pinMode().

В функции loop() мы выполняем чтение состояние кнопки и сохраняем значение в переменной с именем btnState. Затем у нас есть два оператора if, которые говорят: «Если состояние кнопки LOW (низкий уровень), то на контакте зуммера устанавливается HIGH (высокий уровень), а если состояние кнопки HIGH (высокий уровень), то на контакте зуммера устанавливается LOW (низкий уровень)».

После того, как вы соберете схему и загрузите код в плату, то вы должны услышать то, что нажатие кнопки включает зуммер.

**Симуляция схемы в программе Proteus**

Соберем данную схему в программе Proteus, скомпилируем файл программы и проверим ее работу в симуляторе.

![](proteus-arduino-nano-buzzer-button.png)

###### [к содержанию](#soderzhanie)

###### kak-passivnyi
### 4. Как подключить пассивный зуммер к Arduino.

Теперь перейдем к пассивному зуммеру. Одним из преимуществ пассивных зуммеров перед активными является то, что вы можете контролировать тон или высоту звука, издаваемого зуммером. С активными зуммерами возможен только один тон, а с пассивными зуммерами возможен любой тон в пределах динамического диапазона зуммера.

Для воспроизведения звука пассивным зуммерам требуется прямоугольный сигнал. Изменяя частоту прямоугольной волны, вы можете изменить высоту звука.

В Arduino есть встроенная функция под названием tone (), которая генерирует прямоугольные импульсы с указанной частотой:

    tone(pin, frequency, duration);

Функция tone() принимает три параметра: pin — номер вывода, на который вы хотите отправить прямоугольную волну; frequency — частоту тона в герцах; и, при необходимости, duration — длительность сигнала в миллисекундах.

Функцию noTone() можно использовать для отключения функции tone():

    noTone();

Давайте соберем проект, который будет циклически повторять набор музыкальных нот от A до G. Для этого нам понадобится только плата Arduino (мы будем использовать Nano) и пассивный зуммер.

**Схема подключения пассивного зуммера к плате Arduino**

Пассивный зуммер к плате Arduino можно подключить следующим образом:

![](arduino-passive-buzzer.png)

Подключение пассивного зуммера к Ардуино
Плюсовой контакт зуммера подключается к цифровому контакту D9 платы Ардуино, а минусовой контакт подключается к GND.

**Программа для Ардуино и пассивного зуммера**

На просторах интерната можно найти код для различных мелодий. Для примера возьмем код мелодии из некогда популярной видеоигры «Супер Марио».

    // Номер контакта, к которому подключен зуммер
    int buzzerPin=9;
    // Частоты для функции tone()
    int notes[] = 
    {
     1318, 1318, 1318, 1046, 1318, 1568, 784,
     1046, 784, 659, 880, 987, 932, 880, 784,
     1318, 1568, 1750, 1396, 1568, 1318, 1046, 1174, 987,
     1046, 784, 659, 880, 987, 932, 880,
     784, 1318, 1568, 1750, 1396, 1568, 1318, 1046, 1174, 987,
     1568, 1480, 1396, 1244, 1318, 830, 880, 1046, 880, 1046,
     1174,
     0, 1568, 1480, 1396, 1244, 1318, 2093, 2093, 2093,
     1568, 1480, 1396, 1244, 1318, 830, 880, 1046, 880, 1046,
     1174, 1244, 1174, 1046, 
    };
    // Длительности
    int times[] = 
    {
     150, 300, 150, 150, 300, 600, 600,
     450, 150, 300, 300, 150, 150, 300, 210,
     210, 150, 300, 150, 150, 300, 150, 150, 450,
     450, 150, 300, 300, 150, 150, 300,
     210, 210, 150, 300, 150, 150, 300, 150, 150, 450,
     150, 150, 150, 300, 150, 150, 150, 150, 150, 150, 150,
     0, 150, 150, 150, 300, 150, 300, 150, 600,
     150, 150, 150, 300, 150, 150, 150, 150, 150, 150, 150, 
     300,  450, 600,
    };
    // Задержки между сигналами
    int delays[] =
    {
     150, 300, 300, 150, 300, 600, 600, 450, 450, 450, 300, 300, 
     150, 300, 210, 210, 150, 300, 150, 300, 300, 150, 150, 450,
     450, 450, 450, 300, 300, 150, 300, 210, 210, 150, 300, 150, 
     300, 300, 150, 150, 600, 150, 150, 150, 300, 300, 150, 150, 
     300, 150, 150, 150, 300, 150, 150, 150, 300, 300, 300, 150, 
     600, 150, 150, 150, 300, 300, 150, 150, 300, 150, 150, 450, 
     450, 450, 1200,
    };
    /*
     * В цикле FOR будет вызвана 75 раз функция tone()
     * с разными частотами (с разными тональностями) 
     * и длительностями, после каждого вызова tone()
     * вызывается функция delay() с определенной задержкой
     *
     * Массив notes[] - хранит частоты
     * Массив times[] - хранит длительности
     * Массив delays[] - хранит время задержки
    */
    void setup()
    {
      for (int i = 0; i < 75; i++)
      {
        tone(buzzerPin, notes[i], times[i]);
        delay(delays[i]);
      }
      noTone(buzzerPin);
    }
    void loop(){}
    
В массиве notes[] находятся 75 частот для импульсных сигналов. «Подавая» их на зуммер, он будет издавать звук определенной тональности. В массиве times[] находятся длительности для каждой частоты — т.е. продолжительность каждого звука определенной тональности. В массиве delays[] находятся значения для задержки между вызовами функции tone() в миллисекундах.

Перебор значений происходит в цикле for(), который находится в функции setup(). После цикла for вызывается функция noTone(), которая прекращает генерацию на контакте buzzerPin.

**Симуляция схемы с пассивным зуммером в программе Proteus**

Создадим новый проект в программе Proteus и в качестве отладочной платы выберем Arduino Nano V3. Добавим компонент SOUNDER, который будем использовать в качестве пассивного зуммера. Один его контакт подключим к 9 контакту платы Ардуино, другой — подключим к GND. Во вкладке Source Code добавим код, представленный чуть выше, и скомпилируем проект. После запуска симуляции вы должны услышать мелодию из игры «Супер Марио».

![](proteus-nano-and-sounder.png)
 
###### [к содержанию](#soderzhanie)

###### modul-aktivnogo-zummera-ky-012
### 5. Модуль активного зуммера KY-012.

![](ky-012.jpeg)

Модуль активного зуммера KY-012 издает однотональный звук при подаче сигнала высокого уровня. Для воспроизведения различных тонов используйте KY-006.

**Технические данные KY-012**

Модуль состоит из активного зуммера, внутри которого есть встроенный генератор. Поэтому для его работы необходимо просто подать постоянное напряжение.

С помощью этого модуля невозможно задать частоту звука. Здесь она постоянная — приблизительно равна 2.5кГц. Для этой цели требуется использовать пассивный зуммер — KY-006.

    Напряжение	                  3.5В ~ 5.5В
    Максимальный ток	          30мА при 5В
    Резонансная частота	          2.5кГц ± 300Гц 
    Минимальный звуковой выход	  85дБ
    Температура окружающей среды  -20°C ~ 70°C 
    Размер платы	              18.5мм x 15мм

**Подключение платы модуля KY-012 к Ардуино УНО**

![](raspinovka.png)

Подключите сигнал (S) к контакту 8 на плате Ардуино.
Подключите землю (-) к GND на плате Ардуино.
Средний контакт не используется.

![](KY-012-подключение-к-Arduino-768x382.jpeg)

Следующий код для Arduino будет постоянно включать и выключать зуммер, генерируя серию коротких звуковых сигналов. Для установки высокого и низкого уровней напряжения на цифровом контакте используется функция [digitalWrite](https://rxtx.su/mikrokontrollery/arduino/funkcii-arduino-ide/funkciya-digitalwrite/).

    int buzzer = 8; // Контакт, к которому подключен активный зуммер
    void setup ()
    {
       pinMode (buzzer, OUTPUT); // Настройка контакта на выход
    }
    void loop ()
    {
       digitalWrite (buzzer, HIGH);  // Установка высокого уровня на контакте
       delay (1000);                 // Задержка 1 секунда
       digitalWrite (buzzer, LOW);   // Установка низкого уровня на контакте
       delay (2000);                 // Задержка 2 секунда
    }
 
###### [к содержанию](#soderzhanie)

###### modul-passivnogo-zummera-ky-006
### 6. Модуль пассивного зуммера KY-006.

![](KY-006.jpeg)

Пассивный пьезоэлектрический модуль зуммера KY-006 может генерировать различные звуковые тона в зависимости от частоты входного прямоугольного сигнала. Для создания однотональных звуков используйте активный зуммер KY-012.

**Технические данные модуля KY-006**

На этой небольшой плате установлены зуммер и 3-контактный разъем, из которых задействованы только 2, поскольку необходимы только сигнальный контакт, обозначенный символом S, и общий контакт, обозначенный символом —.

    Рабочее напряжение	     3.5V ~ 5V постоянного тока
    Диапазон генерации тона	 1.5кГц ~ 2.5кГц
    Размер платы	         18.5мм x 15мм
    Вес	                     2.4г

Зуммер — это звуковой сигнализатор, который может быть механическим, электромеханическим или пьезоэлектрическим. 

У активного зуммера есть встроенный внутренний генератор, поэтому для его работы требуется только подача постоянного напряжения.

У пассивного зуммера нет внутреннего генератор. Чтобы он излучал звук, необходимо подать на него прямоугольные импульсы с частотой приблизительно от 500Гц до 5кГц.

**Схема подключения к Ардуино**

![](KY-006 raspinovka.jpg)

Подключите сигнал модуля (S) к контакту 2 на Arduino.
Подключите землю (-) к GND на плате Arduino.
Средний контакт модуля не используется.

![](KY-006-подключение-к-Ардуино-УНО.jpeg)

Следующий скетч будет генерировать два разных тона, быстро включая и выключая зуммер на разных частотах с задержкой. Управляющий сигнал подключается к контакту 2 платы Ардуино.

Прямоугольные импульсы будут формироваться следующим образом: установка высокого уровня на выходе [digitalWrite](https://rxtx.su/mikrokontrollery/arduino/funkcii-arduino-ide/funkciya-digitalwrite/) (buzzer, HIGH), задержка функцией delay(), установка низкого уровня на выходе digitalWrite (buzzer, LOW).

Для первого тона частота приблизительно будет равна 500Гц (задержка 1 мс), для второго — около 250Гц (задержка 2 мс).

    int buzzer = 2 ; // Определение контакта ардуины, к которой подключен зуммер
    
    void setup ()                        
    { 
      pinMode (buzzer, OUTPUT) ;// Инициализация контакта на выход
    }                        
    
    void loop ()                    
    {
      unsigned char i;
      /* Бесконечный цикл */
      while (1)
      { 
        // В этой программе зуммер будет управляться 2 различными частотами.
        // Сигнал представляет из себя сигнал прямоугольной формы.                
        // Частота будет определяться задержкой между включением и выключением.
                        
        // Первый тон. Задержка 1мс. Частота приблизительно =500Гц
        for (i = 0; i <80; i++)                    
        { 
          digitalWrite (buzzer, HIGH) ;
          delay (1) ;
          digitalWrite (buzzer, LOW) ;                
        }
        delay (1) ;
                        
        // Первый тон. Задержка 1мс. Частота приблизительно =250Гц
        for (i = 0; i <100; i++)                        
        { 
          digitalWrite (buzzer, HIGH) ;
          delay (2) ;
          digitalWrite (buzzer, LOW) ;                
        }
      }
    }
 
Еще один способ заставить зуммер издавать звук — использовать команду tone(), которая генерирует прямоугольную ШИМ-волну заданной частоты (с коэффициентом заполнения 50%) на выходе.

Третьим параметрам можно указать продолжительность генерации, иначе волна будет продолжаться до вызова команды noTone().

Одновременно может быть сгенерирован сигнал только на одном контакте платы Ардуино. Если звук уже выводится на другой вывод, вызов tone() не будет иметь никакого эффекта.

Чтобы остановить генерацию прямоугольной волны, вызванной tone(), вы должны использовать команду noTone().

![](KY-006-подключение-к-Ардуино-Нано.webp)

    #define buzzerPin 3 // Контакт для подключения зуммера

    void setup()
    {
      pinMode(buzzerPin, OUTPUT);
    }

    void loop()
    {
      tone(buzzerPin, 500);   // Выдает сигнал частотой 500 Гц
      delay (1000);           // Задержка 1 секунда
      tone(buzzerPin, 1000);  // Выдает сигнал частотой 1000 Гц
      delay (1000);           // Задержка 1 секунда
  noTone(buzzerPin);      // Останавливает генерацию ШИМ-волны
  delay(3000);            // Тишина 3 секунды
}
###### [к содержанию](#soderzhanie)
