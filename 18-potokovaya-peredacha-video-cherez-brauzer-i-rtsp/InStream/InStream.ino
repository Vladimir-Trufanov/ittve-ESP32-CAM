/** Arduino-Esp32-CAM                                      *** InStream.ino ***
 * 
 *           Базовый пример параллельной работы двух задач в ESP32 board 5.1.33
 *                                        (на контроллере AI-Thinker ESP32-CAM)
 * 
 * v1.0, 13.10.2024                                   Автор:      Труфанов В.Е.
 * Copyright © 2024 tve                               Дата создания: 13.10.2024
 * 
 *    В примере запускаются две задачи, которые работают одновременно во 
 * внутренней операционной системе FreeRTOS для ESP32. Первая задача мигает 
 * контрольным светодиодом, а вторая выводит в последовательный порт традиционный 
 * текст "Всем привет!".
 * 
**/

// Потоковая передача в веб-браузер    

/**
 * Это довольно простой способ транслировать видео с камеры Wi-Fi. По сути, 
 * ESP32 запускает веб-сервер и при подключении веб-браузера отправляет 
 * изображения с камеры в веб-браузер. Таким образом, это не настоящий поток 
 * данных с камеры, а скорее поток изображений.
 * 
 * Для включения потоковой передачи в веб-браузер используется веб-сервер 
 * из фреймворка Arduino ESP32.
 * 
**/

// 2025-02-27 Работало на Esp32 от Espressif Systems v3.0.7
// 2025-02-27 НЕ ИДЕТ  на Esp32 от Espressif Systems v3.1.3

// ****************************************************************************
// *          Выполнить настройки один раз при нажатии кнопки reset           *
// *                      или при включении питания платы                     *
// ****************************************************************************
void setup() 
{
  Serial.begin (115200);

  // Определяем дополнительную задачу
  xTaskCreatePinnedToCore (
    instream,       // название функции, которая будет запускаться, как параллельная задача
    "instream",     // название задачи
    2048,           // размер стека в байтах. Задача будет использовать этот объем памяти, когда 
                    // ей потребуется сохранить временные переменные и результаты. Для задач с 
                    // большим объемом памяти потребуется больший размер стека.
    NULL,           // указатель на параметр, который будет передан новой задаче. 
                    // NULL, если параметр не передаётся.
    0,              // приоритет задачи
    NULL,           // дескриптор или указатель на задачу. Его можно использовать для вызова задачи.
                    // Если это не требуется, то NULL.
    0               // идентификатор ядра процессора, на котором требуется запустить задачу. 
                    // У ESP32 есть два ядра, обозначенные как 0 и 1.
  );
}
// ****************************************************************************
// *           Циклически выполнять первую задачу мигания светодиодом         *
// ****************************************************************************
void loop() 
{
}
// ****************************************************************************
// *  Выполнять передачу текста в последовательный порт в бесконечном цикле   *
// *      (поочерёдный полусекундный вывод в com-порт слов "Всем привет!")    *
// *                                                                          *
// * !!! Если задача завершится (не будет циклится),контроллер перезагрузится *
// ****************************************************************************
int nFrame=0;
void instream (void* pvParameters) 
{
  while (1) 
  {
    nFrame++;
    Serial.print("Кадр: "); Serial.println(nFrame);
    vTaskDelay(2200/portTICK_PERIOD_MS);
  }
}

// *********************************************************** InStream.ino ***
