/** Arduino, Esp32 ******************************************* AttachSNTP.h ***
 * 
 *         Подключится к пулу серверов точного времени и синхронизировать время 
 *                                                контроллера по протоколу SNTP
 * 
 * v1.0.0, 27.12.2024                                 Автор:      Труфанов В.Е.
 * Copyright © 2024 tve                               Дата создания: 27.12.2024
**/

#pragma once     
#include "Arduino.h"
#include "nvs_flash.h"
#include "nvs.h"

// Подключаем библиотеку для связи с сервером SNTP:

// - функция gettimeofday используется для получения текущей метки времени;
// - функция settimeofday используется для установки текущего времени при 
//   получении ответа от сервера NTP;
// - функция sntp_get_sync_status() используется для получения информации о 
//   состоянии синхронизации времени. Если время синхронизировано, то возвращается 
//   ответ SNTP_SYNC_RETURN_COMPLETED. Если состояние сброшено, то возвращается 
//   SNTP_SYC_STATUS_RESET. Кроме того, если происходит плавная синхронизация 
//   времени, то возвращается ответ SNTP_SYNC_STATUS_IN_PROGRESS;
// - функция sntp_set_sync_status() используется для установки статуса синхронизации 
//   времени. Она принимает один параметр — «sync_status», который является 
//   статусом синхронизации времени;
// - функция sntp_get_sync_mode() используется для получения режима синхронизации 
//   времени. Эта функция возвращает значение SNTP_SYNC_MODE_IMMEDIATE, если 
//   синхронизация настроена на немедленное обновление времени. В противном случае 
//   она возвращает SNTP_SYNC_MODE_SMOOTH - так как настроено плавное обновление времени;
// - функция sntp_set_sync_mode() используется для установки режима синхронизации 
//   времени. Она принимает один параметр «sync_mode», который является режимом 
//   синхронизации. Режим может быть SNTP_SYNC_MODE_IMMEDIATE или SNTP_SYNC_MODE_SMOOTH. 
//   Если выбран режим SNTP_SYNC_MODE_IMMEDIATE, системное время обновляется 
//   сразу после получения данных с сервера SNTP. Если выбран режим SNTP_SYNC_MODE_SMOOTH, 
//   устанавливается плавное обновление времени. В этом случае для уведомления 
//   о времени используется функция adjtime;
// - функция sntp_set_time_sync_notification_cb() используется для установки 
//   функции обратного вызова по уведомлению о синхронизации времени. Она 
//   принимает один параметр — функцию обратного вызова.

//   ESP32 использует два аппаратных таймера для отслеживания системного 
// времени: 
// - таймер RTC: позволяет отслеживать время в различных режимах сна, а также 
//   сохранять время при любых сбросах (за исключением сброса при включении питания, 
//   который сбрасывает таймер RTC). Отклонение частоты зависит от источников 
//   тактового сигнала таймера RTC и влияет на точность только в режимах сна, 
//   в которых время будет измеряться с точностью до 6,6667 мкс;
// - таймер с высоким разрешением: этот таймер недоступен в спящих режимах и не 
//   сохраняется после перезагрузки, но обладает большей точностью. Таймер 
//   использует источник тактовых импульсов APB_CLK (обычно 80 МГц), отклонение 
//   частоты которого составляет менее ±10 частей на миллион. Время измеряется с 
//   точностью до 1 мкс.
// Системное время можно отслеживать с помощью одного или обоих аппаратных 
// таймеров в зависимости от целей приложения и требований к точности системного 
// времени (при умалчиваемом режиме подключены оба таймера, это гарантирует, что 
// после синхронизации с сервером SNTP время будет отсчитываться с помощью обоих 
// таймеров. Когда плата ESP32 будет находиться в режиме глубокого сна, для отслеживания 
// времени будет использоваться встроенный таймер RTC, а таймер FRC1 с высоким 
// разрешением обеспечит точность времени до микросекунд, пока плата будет 
// находиться в активном режиме. 

#include "esp_sntp.h"



class TAttachSNTP
{
   public:

   // Построить объект (конструктор класса)
   TAttachSNTP();
   // ----Создать очередь сообщений                         
   void Create();
   /*
   // Создать очередь
   String Create();
   // Отправить сообщение из задачи
   String Send(String Source); 
   // Отправить сообщение из прерывания
   String SendISR(String Source);
   // Подключить внешнюю функцию передачи сообщения на периферию       
   void attachFunction(void (*function)(char *mess, char *prefix));
   // Определить количество свободных мест в очереди
   int How_many_free();                
   // Определить, сколько сообщений накопилось в очереди и их можно выгрузить 
   int How_many_wait(); 
   // Выбрать сообщение из очереди
   char* Receive();
   // Выбрать сообщение из очереди и отправить на периферию 
   char* Post(char *prefix="");
   // Выбрать все сообщения разом из очереди и отправить на периферию
   void PostAll(char *prefix="");
   */
   
   private:

   // Создаем переменную локального времени (секунды с начала эпохи)
   time_t now;
   // Создаем структуру времени timeinfo в которую будем вкладывать
   // выбранное и преобразованное время в секундах с начала эпохи
   struct tm timeinfo;

   //void Synchron(struct timeval* t); 
   void initSNTP(); 
   void setTimezone(); 
   void wait4SNTP(); 
   void ViewLocalTime();
   void printTime(); 

   /*
   void (*atatchedF)(char *mess, char *prefix); // прикреплённая функция
   int QueueSize;                               // размер очереди 
   struct tStruMess taskStruMess;               // структура для для отправки сообщения 
   struct tStruMess receiveStruMess;            // структура для для приема сообщения 
   char tBuffer[1024];                          // буфер сообщения на 1023 символа и завершающий ноль
   QueueHandle_t tQueue;                        // очередь (дескриптор) сообщений из структур tStruMess1024   
   // Выделить переменную планировщику задач FreeRTOS для указания
   // необходимости переключения после прерывания на более приоритетную 
   // задачу, связанную с очередью
   BaseType_t xHigherPriorityTaskWoken;
   // Скопировать не более 1023 символов сообщения в буфер и завершить нулем
   void strcopy1024(String Source);
   */            
};

// *********************************************************** AttachSNTP.h ***
